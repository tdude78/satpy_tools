import numpy as np

# original paper
# https://ntrs.nasa.gov/api/citations/19770009539/downloads/19770009539.pdf
# Geopotential heights, Z(m) in the paper
h_1976_km = np.array([60000, 60500, 61000, 61500, 62000, 62500, 63000, 63500, 64000, 64500, 
		 65000, 65500, 66000, 66500, 67000, 67500, 68000, 68500, 69000, 69500, 70000, 
		 70500, 71000, 71500, 72000, 72500, 73000, 73500, 74000, 74500, 75000, 75500, 
		 76000, 76500, 77000, 77500, 78000, 78500, 79000, 79500, 80000, 80500, 81000, 
		 81500, 82000, 82500, 83000, 83500, 84000, 84500, 85000, 85500, 86000, 86500, 
		 87000, 87500, 88000, 88500, 89000, 89500, 90000, 90500, 91000 , 91500, 92000, 
		 92500, 93000, 93500, 94000, 94500, 95000, 95500, 96000, 96500, 97000, 97500, 
		 98000, 98500, 99000, 99500, 100000, 101000, 102000, 103000, 104000, 105000, 106000, 
		 107000, 108000, 109000, 110000, 111000, 112000, 113000, 114000, 115000, 116000, 
		 117000, 118000, 119000, 120000, 121000, 122000, 123000, 124000, 125000, 126000, 
		 127000, 128000, 129000, 130000, 131000, 132000, 133000, 134000, 135000, 136000, 
		 137000, 138000, 139000, 140000, 141000, 142000, 143000, 144000, 145000, 146000, 
		 147000, 148000, 149000, 150000, 151000, 152000, 153000, 154000, 155000, 156000, 
		 157000, 158000, 159000, 160000, 161000, 162000, 163000, 164000, 165000, 166000, 
		 167000, 168000, 169000, 170000, 171000, 172000, 173000, 174000, 175000, 176000, 
		 177000, 178000, 179000, 180000, 181000, 182000, 183000, 184000, 185000, 186000, 
		 187000, 188000, 189000, 190000, 191000, 192000, 193000, 194000, 195000, 196000, 
		 197000, 198000, 199000, 200000, 201000, 202000, 203000, 204000, 205000, 206000, 
		 207000, 208000, 209000, 210000, 211000, 212000, 213000, 214000, 215000, 216000, 
		 217000, 218000, 219000, 220000, 221000, 222000, 223000, 224000, 225000, 226000, 
		 227000, 228000, 229000], dtype=np.float64)/1000

T_1976_K  = np.array([247.021, 245.647, 244.274, 242.900, 241.527, 240.154, 238.781, 237.409, 
		236.036, 234.664, 233.292, 231.921, 230.549, 229.178, 227.807, 226.436, 225.065, 
		223.695, 222.325, 220.955, 219.585, 218.215, 216.846, 215.477, 214.263, 213.285, 
		212.308, 211.330, 210.353, 209.376, 208.399, 207.423, 206.446, 205.469, 204.493, 
		203.517, 202.541, 201.565, 200.590, 199.614, 198.639, 197.663, 196.688, 195.713, 
		194.739, 193.764, 192.790, 191.815, 190.841, 189.867, 188.893, 187.920, 186.87, 
		186.87, 186.87, 186.87, 186.87, 186.87, 186.87, 186.87, 186.87, 186.87, 186.87, 
		186.89, 186.96, 187.08, 187.25, 187.47, 187.74, 188.05, 188.42, 188.84, 189.31, 
		189.83, 190.40, 191.04, 191.72, 192.47, 193.28, 194.15, 195.08, 197.16, 199.53, 
		202.23, 205.31, 208.84, 212.89, 217.63, 223.29, 230.33, 240.00, 252.00, 264.00, 
		276.00, 288.00, 300.00, 312.00, 324.00, 336.00, 348.00, 360.00, 371.89, 383.55, 
		394.99, 406.22, 417.23, 428.04, 438.64, 449.04, 459.25, 469.27, 479.09, 488.74, 
		498.20, 507.48, 516.59, 525.53, 534.29, 542.90, 551.34, 559.63, 567.76, 575.73, 
		583.56, 591.24, 598.78, 606.17, 613.43, 620.55, 627.54, 634.39, 641.12, 647.72, 
		654.20, 660.56, 666.80, 672.92, 678.93, 684.83, 690.61, 696.29, 701.86, 707.33, 
		712.70, 717.96, 723.13, 728.20, 733.18, 738.07, 742.86, 747.57, 752.18, 756.71, 
		761.16, 765.53, 769.81, 774.01, 778.14, 782.19, 786.17, 790.07, 793.89, 797.65, 
		801.34, 804.96, 808.51, 812.00, 815.42, 818.78, 822.08, 825.31, 828.49, 831.61, 
		834.67, 837.67, 840.62, 843.51, 846.35, 849.14, 851.87, 854.56, 857.20, 859.78, 
		862.32, 864.82, 867.26, 869.67, 872.02, 874.34, 876.61, 878.84, 881.03, 883.18, 
		885.29, 887.36, 889.39, 891.39, 893.35, 895.27, 897.16, 899.01, 900.83, 902.62, 
		904.37, 906.09, 907.78, 909.44, 911.07, 912.67, 914.24], dtype=np.float64)

e4  = (1e-4)  * np.array([3.0968, 2.9093, 2.7321, 2.5649, 2.4071, 2.2582, 2.1178, 1.9853, 1.8605, 1.7429, 1.6321,
			   1.5278, 1.4296, 1.3372, 1.2503, 1.1685, 1.0917, 1.0195], dtype=np.float64)
e5  = (1e-5)  * np.array([9.5171, 8.8804, 8.2829, 7.7223, 7.1966, 6.7037, 6.2374, 5.7951, 5.3824, 4.9975, 4.6386,
			   4.3040, 3.9921, 3.7016, 3.4311, 3.1792, 2.9448, 2.7267, 2.5239, 2.3353, 2.1600, 1.9971,
			   1.8458, 1.7054, 1.5750, 1.4540, 1.3418, 1.2378, 1.1414, 1.0521], dtype=np.float64)
e6  = (1e-6)  * np.array([9.6940, 8.9282, 8.2196, 7.5641, 6.958, 6.366, 5.824, 5.328, 4.875, 4.460, 4.081, 3.734,
			   3.416, 3.126, 2.860, 2.616, 2.393, 2.188, 2.000, 1.828, 1.670, 1.526, 1.393, 1.273, 1.162, 1.061], dtype=np.float64)
e7  = (1e-7)  * np.array([9.685, 8.842, 8.071, 7.367, 6.725, 6.139, 5.604, 4.695, 3.935, 3.300, 2.769, 2.325,
				1.954, 1.643, 1.381, 1.161], dtype=np.float64)
e8  = (1e-8)  * np.array([9.708, 8.111, 6.838, 5.811, 4.975, 4.289, 3.720, 3.246, 2.847, 2.509, 2.222, 1.977,
			   1.767, 1.585, 1.428, 1.291, 1.171, 1.065], dtype=np.float64)
e9  = (1e-9)  * np.array([9.717, 8.889, 8.152, 7.494, 6.904, 6.374, 5.897, 5.465, 5.074, 4.719, 4.396, 4.101,
			   3.831, 3.584, 3.358, 3.150, 2.958, 2.781, 2.618, 2.466, 2.326, 2.196, 2.076, 1.963,
			   1.859, 1.761, 1.670, 1.585, 1.505, 1.431, 1.361, 1.295, 1.233, 1.175, 1.121, 1.069, 1.021], dtype=np.float64)
e10 = (1e-10) * np.array([9.750, 9.319, 8.911, 8.525, 8.161, 7.815, 7.488, 7.178, 6.883, 6.604, 6.339, 6.086,
						  5.846, 5.618, 5.401, 5.194, 4.997, 4.809, 4.630, 4.459, 4.295, 4.139, 3.990, 3.847,
						  3.711, 3.581, 3.456, 3.336, 3.222, 3.112, 3.006, 2.905, 2.809, 2.716, 2.626, 2.541,
						  2.458, 2.379, 2.303, 2.230, 2.160, 2.092, 2.027, 1.964, 1.904, 1.846, 1.790, 1.736,
						  1.683, 1.633, 1.585, 1.538, 1.493, 1.450, 1.408, 1.367, 1.328, 1.290, 1.253, 1.218,
						  1.184, 1.151, 1.119, 1.088, 1.058], dtype=np.float64)

rhos_1976 = np.concatenate((e4, e5, e6, e7, e8, e9, e10))
